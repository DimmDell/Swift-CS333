<!DOCTYPE html>
<!-- saved from url=(0081)file:///Users/ilaloskarev/Documents/CS333/Swift-CS333/slides/Syntax/index.html#/1 -->
<html class=" js no-mobile desktop no-ie chrome chrome52 users-section ilaloskarev-section documents-section cs333-section swift-cs333-section slides-section syntax-section w-745 gt-240 gt-320 gt-480 gt-640 lt-768 lt-800 lt-1024 lt-1280 lt-1440 lt-1680 lt-1920 no-portrait landscape gradient rgba opacity textshadow multiplebgs boxshadow borderimage borderradius cssreflections csstransforms csstransitions no-touch retina fontface domloaded" id="index-page"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
		
		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

		<title>Swift-CS333. Swift Syntax</title>

		<link rel="stylesheet" href="./Swift-CS333. Swift Syntax_files/reveal.css">
		<link rel="stylesheet" href="./Swift-CS333. Swift Syntax_files/swift.css">
		<!-- Theme used for syntax highlighting of code included in main theme -->
		<!-- Printing and PDF exports -->
		<script type="text/javascript">
			var link = document.createElement( 'link' );
			link.rel = 'stylesheet';
			link.type = 'text/css';
			link.href = window.location.search.match( /print-pdf/gi ) ? '../css/print/pdf.css' : '../css/print/paper.css';
			document.getElementsByTagName( 'head' )[0].appendChild( link );
 		</script><link rel="stylesheet" type="text/css" href="./Swift-CS333. Swift Syntax_files/paper.css">
		<style>
			#swift-bird{
				-webkit-clip-path: polygon(10% 0%, 70% 0, 90% 100%, 30% 100%);
				clip-path: polygon(10% 0%, 70% 0, 90% 100%, 30% 100%);
				max-width:100%;
				/*max-height: 100%*/
			}
		</style><script type="text/javascript" src="./Swift-CS333. Swift Syntax_files/marked.js"></script><script type="text/javascript" src="./Swift-CS333. Swift Syntax_files/markdown.js"></script><script type="text/javascript" src="./Swift-CS333. Swift Syntax_files/reveal-chart.js"></script><script type="text/javascript" src="./Swift-CS333. Swift Syntax_files/chart.min.js"></script><script type="text/javascript" src="./Swift-CS333. Swift Syntax_files/notes.js"></script><script type="text/javascript" src="./Swift-CS333. Swift Syntax_files/highlight.pack.js"></script>
	</head>
	<body>
		<div class="reveal slide center" role="application" data-transition-speed="default" data-background-transition="fade">
			<div class="topbar" style="display: block;">
				<div class="breadcrumbs">Overview</div>
			<div class="slide-number" style="display: block;"><span class="slide-number-a">2</span><span class="slide-number-delimiter">/</span><span class="slide-number-b">41</span></div></div>
			<div class="slides" style="width: 960px; height: 700px; left: 50%; top: 50%; bottom: auto; right: auto; transform: translate(-50%, -50%) scale(0.698438);">
				<section hidden="" aria-hidden="true" class="past" style="top: 28.5px; display: block;">
					<h2>CS333</h2>
					<h1>Mobile Development</h1>
					<p>
						<br>Ilya Loshkarev<br>
						<a href="mailto:loshkarev.i@gmail.com">loshkarev.i@gmail.com</a>
					</p>
					<p class="footer">
						<br>SFEDU 2016
					</p>
				</section>
				<section class="present" style="top: 99.5px; display: block;">
					<h3 class="hidden">Overview</h3>
					<div class="row">
						<div class="col">
					<ul>
						<li>
							<a href="file:///Users/ilaloskarev/Documents/CS333/Swift-CS333/slides/Syntax/index.html#/2">The Basics</a>
						</li>
						<li>
							<a href="file:///Users/ilaloskarev/Documents/CS333/Swift-CS333/slides/Syntax/index.html#/3">Functions</a>
						</li>
						<li>
							<a href="file:///Users/ilaloskarev/Documents/CS333/Swift-CS333/slides/Syntax/index.html#/4">Closures</a>
						</li>
						<li>
							<a href="file:///Users/ilaloskarev/Documents/CS333/Swift-CS333/slides/Syntax/index.html#/5">Classes</a>
						</li>
						<li>
							<a href="file:///Users/ilaloskarev/Documents/CS333/Swift-CS333/slides/Syntax/index.html#/6">Error Handling</a>
						</li>
					</ul>
				</div>
				<div class="col">
					<img id="swift-bird" src="./Swift-CS333. Swift Syntax_files/swift-bird.jpg">
				</div>
				</div>
				</section>
<!-- Swift Basics			-->
				<section class="stack future" hidden="" aria-hidden="true" style="top: 0px; display: block;">
					<section data-background="../img/swift-og.png" data-background-image="../img/swift-og.png" style="top: 219px; display: block;">
						<h1>The Basics</h1>
					</section>
					<section class="future" aria-hidden="true" style="top: 78.5px; display: block;">
						<h3>Constants and Variables</h3>
						<pre><code data-noheader="" class="hljs swift"><span class="hljs-keyword">let</span> pi = <span class="hljs-number">3.14</span>
<span class="hljs-keyword">var</span> r = <span class="hljs-number">1.0</span>
<span class="hljs-keyword">while</span> r &lt; <span class="hljs-number">100</span> {
    <span class="hljs-keyword">let</span> sqr = r * r * pi
    <span class="hljs-built_in">print</span>(<span class="hljs-string">"Radius: <span class="hljs-subst">\(r)</span>; Square: <span class="hljs-subst">\(sqr)</span>"</span>)
    r += <span class="hljs-number">1</span>
}</code></pre>
						<div class="row">
							<div class="col">
								<code class="hljs-keyword">let</code> decalres a constant
							</div>
							<div class="col">
								<code class="hljs-keyword">var</code> declares a variable
							</div>
						</div>
						<p class="notice">
							Always declare a constant unless absolutely necessary
						</p>
					</section>
					<section class="future" aria-hidden="true" style="top: 330px; display: none;">
						<h3>Basic Datatypes</h3>
						<pre><code data-noheader="" class="hljs swift"><span class="hljs-keyword">let</span> i: <span class="hljs-type">Int</span> = <span class="hljs-number">1</span>  <span class="hljs-comment">// default Int is either Int32 or Int64</span>
<span class="hljs-keyword">let</span> f: <span class="hljs-type">Float</span> = <span class="hljs-number">2.7</span>
<span class="hljs-keyword">let</span> d: <span class="hljs-type">Double</span> = <span class="hljs-number">3.1</span>
<span class="hljs-keyword">let</span> b: <span class="hljs-type">Bool</span> = <span class="hljs-literal">true</span>
<span class="hljs-keyword">let</span> s: <span class="hljs-type">String</span> = <span class="hljs-string">"hello"</span></code></pre>
						<p>
							Swift can infer type of a variable
						</p>
						<pre><code data-noheader="" class="hljs swift"><span class="hljs-keyword">let</span> x = <span class="hljs-number">5</span>, y = <span class="hljs-number">3.142</span>, z = <span class="hljs-literal">true</span>
<span class="hljs-keyword">let</span> names = [<span class="hljs-string">"Alex"</span>, <span class="hljs-string">"Anna"</span>, <span class="hljs-string">"Ivan"</span>, <span class="hljs-string">"Maria"</span>]</code></pre>
					</section>
					<section class="future" aria-hidden="true" style="top: 330px; display: none;">
						<h3>Type Conversion</h3>
						<p>
							Swift is type-safe language
						</p>
						<pre><code data-noheader="" class="hljs swift"><span class="hljs-keyword">var</span> pi = <span class="hljs-number">3</span> + <span class="hljs-number">0.14</span> <span class="hljs-comment">// literals don't have explicit type</span>
<span class="hljs-keyword">let</span> three = <span class="hljs-number">3</span>
<span class="hljs-keyword">let</span> pointOneFour = <span class="hljs-number">0.14</span>
pi = <span class="hljs-type">Double</span>(three) + pointOneFour
<span class="hljs-comment">// implicit type conversions are not allowed</span>
<span class="hljs-keyword">let</span> roundPi:<span class="hljs-type">Int</span> = <span class="hljs-type">Int</span>(pi)</code></pre>
						<p class="notice">
							All type conversions must be explicit
						</p>
					</section>
					<section class="future" aria-hidden="true" style="top: 330px; display: none;">
						<h3>Functions</h3>
						<pre><code data-noheader="" class="hljs swift"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">greet</span><span class="hljs-params">(person: <span class="hljs-type">String</span>, from hometown: <span class="hljs-type">String</span>)</span></span> -&gt; <span class="hljs-type">String</span> {
    <span class="hljs-keyword">return</span> <span class="hljs-string">"Hello, <span class="hljs-subst">\(person)</span>! Glad you could visit from <span class="hljs-subst">\(hometown)</span>!"</span>
}

<span class="hljs-built_in">print</span>(greet(person: <span class="hljs-string">"Ivan"</span>, from: <span class="hljs-string">"Rostov"</span>))</code></pre>
						<p>
							Every parameter has a name and an argument label
						</p>
						<p class="notice">
							Arguments must be labeled when function is called
						</p>
					</section>
					<section class="future" aria-hidden="true" style="top: 330px; display: none;">
						<h3>Optionals</h3>
						<pre><code data-noheader="" class="hljs swift"><span class="hljs-keyword">let</span> someNum = <span class="hljs-string">"3.14"</span>
<span class="hljs-keyword">let</span> number = <span class="hljs-type">Double</span>(someNum) <span class="hljs-comment">// Double?</span>
<span class="hljs-keyword">if</span> number != <span class="hljs-literal">nil</span> {
    <span class="hljs-built_in">print</span>(<span class="hljs-string">"parsed number: <span class="hljs-subst">\(number!)</span>"</span>) <span class="hljs-comment">// unwraped value is 3.14</span>
}</code></pre>
						<p>
							Optional value contains either value or <code class="hljs-literal">nil</code>
						</p>
						<p class="notice">Always make sure optional contains a value before foced unwraping</p>
					</section>
					<section class="future" aria-hidden="true" style="top: 330px; display: none;">
						<h3>Conditional Statement</h3>
						<pre><code data-noheader="" class="hljs swift"><span class="hljs-keyword">let</span> someChar: <span class="hljs-type">Character</span> = <span class="hljs-string">"z"</span>
<span class="hljs-keyword">if</span> someChar &gt;= <span class="hljs-string">"0"</span> &amp;&amp; someChar &lt;= <span class="hljs-string">"9"</span> {
    <span class="hljs-built_in">print</span>(<span class="hljs-string">"This is a digit."</span>)
} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> someChar &gt;= <span class="hljs-string">"a"</span> &amp;&amp; someChar &lt;= <span class="hljs-string">"z"</span> {
    <span class="hljs-built_in">print</span>(<span class="hljs-string">"This is a letter."</span>)
}</code></pre>
						<p class="notice">
							Curved braces are required
						</p>
					</section>
					<section class="future" aria-hidden="true" style="top: 330px; display: none;">
						<h3>Optional Binding</h3>
						<pre><code data-noheader="" class="hljs swift"><span class="hljs-keyword">let</span> someNum = <span class="hljs-string">"3.14"</span>
<span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> number = <span class="hljs-type">Double</span>(someNum) { <span class="hljs-comment">// number is Double!</span>
    <span class="hljs-built_in">print</span>(<span class="hljs-string">"parsed number: <span class="hljs-subst">\(number)</span>"</span>)
} <span class="hljs-keyword">else</span> {
    <span class="hljs-built_in">print</span>(<span class="hljs-string">"<span class="hljs-subst">\(someNum)</span> is not a number"</span>) <span class="hljs-comment">// number is not reachable</span>
}</code></pre>
						<p class="notice">
							Bound optional always contains a value
						</p>
					</section>
					<section class="future" aria-hidden="true" style="top: 330px; display: none;">
						<h3>Conditional Statement – Switch</h3>
						<pre><code data-noheader="" class="hljs swift"><span class="hljs-keyword">let</span> someChar: <span class="hljs-type">Character</span> = <span class="hljs-string">"z"</span>
<span class="hljs-keyword">switch</span> (someChar) {
    <span class="hljs-keyword">case</span> <span class="hljs-string">"a"</span>:
        <span class="hljs-built_in">print</span>(<span class="hljs-string">"It is the first letter of the alphabet"</span>)
    <span class="hljs-keyword">case</span> <span class="hljs-string">"b"</span>...<span class="hljs-string">"y"</span>:
        <span class="hljs-built_in">print</span>(<span class="hljs-string">"It is some other letter of the alphabet"</span>)
    <span class="hljs-keyword">case</span> <span class="hljs-string">"z"</span>:
        <span class="hljs-built_in">print</span>(<span class="hljs-string">"It is the last letter of the alphabet"</span>)
    <span class="hljs-keyword">default</span>:
        <span class="hljs-built_in">print</span>(<span class="hljs-string">"It is some other character"</span>)
}</code></pre>
						<p class="notice">
							Case must always have a body
						</p>
					</section>
          <section class="future" aria-hidden="true" style="top: 330px; display: none;">
            <h3>Loops</h3>
            <div class="row">
  						<div class="col"><pre><code data-noheader="" class="hljs swift"><span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>
<span class="hljs-keyword">while</span> i &lt; <span class="hljs-number">5</span> {
    i += <span class="hljs-number">1</span>
}
<span class="hljs-keyword">repeat</span> {
    i -= <span class="hljs-number">1</span>
} <span class="hljs-keyword">while</span> i &gt; <span class="hljs-number">0</span></code></pre></div>
  						<div class="col"><pre><code data-noheader="" class="hljs swift"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>...<span class="hljs-number">10</span> {
    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>...i {
        <span class="hljs-built_in">print</span>(<span class="hljs-string">"."</span>)
    }
    <span class="hljs-built_in">print</span>(<span class="hljs-string">"\n"</span>)

}</code></pre></div>
            </div>
          </section>
				</section>
<!-- Functions      -->
        <section hidden="" aria-hidden="true" class="stack future" style="top: 0px; display: block;">
          <section data-background="../img/swift-og.png" data-background-image="../img/swift-og.png" style="top: 219px; display: block;">
            <h1>Functions</h1>
          </section>
          <section class="future" aria-hidden="true" style="top: 330px; display: none;">
            <h3>Argument labels and Parameter names</h3>
            <pre><code data-noheader="" class="hljs swift"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">greet</span><span class="hljs-params">(person name: <span class="hljs-type">String</span>, from hometown: <span class="hljs-type">String</span>)</span></span> -&gt; <span class="hljs-type">String</span> {
  <span class="hljs-keyword">return</span> <span class="hljs-string">"Hello, <span class="hljs-subst">\(name)</span>! Glad you could visit from <span class="hljs-subst">\(hometown)</span>!"</span>
}
<span class="hljs-built_in">print</span>(greet(person: <span class="hljs-string">"Ivan"</span>, from: <span class="hljs-string">"Rostov"</span>))</code></pre>
            <p>
              You can ommit a label by using <code class="hljs-number">_</code>
            </p>
            <pre><code data-noheader="" class="hljs swift"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">greet</span><span class="hljs-params">(<span class="hljs-number">_</span> name: <span class="hljs-type">String</span>, <span class="hljs-number">_</span> hometown: <span class="hljs-type">String</span>)</span></span> -&gt; <span class="hljs-type">String</span> {
  <span class="hljs-keyword">return</span> <span class="hljs-string">"Hello, <span class="hljs-subst">\(name)</span>! Glad you could visit from <span class="hljs-subst">\(hometown)</span>!"</span>
}
<span class="hljs-built_in">print</span>(greet(<span class="hljs-string">"Ivan"</span>, <span class="hljs-string">"Rostov"</span>))</code></pre>
            <p>
              Labels allow function to be called in an expressive manner
            </p>
            <p class="notice">
              Think hard before you ommit an argument label
            </p>
          </section>
          <section class="future" aria-hidden="true" style="top: 330px; display: none;">
            <h3>In-Out parameters</h3>
            <pre><code data-noheader="" class="hljs swift"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">swapTwo</span><span class="hljs-params">(<span class="hljs-number">_</span> a: <span class="hljs-keyword">inout</span> <span class="hljs-type">Int</span>, <span class="hljs-number">_</span> b: <span class="hljs-keyword">inout</span> <span class="hljs-type">Int</span>)</span></span>{
  <span class="hljs-keyword">let</span> <span class="hljs-built_in">c</span> = a; a = b; b = <span class="hljs-built_in">c</span>
}
<span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>, b = <span class="hljs-number">2</span>
swapTwo(&amp;a, &amp;b)</code></pre>
            <p>
              All parameters are constant by default
            </p>
            <p class="notice">
              Swift doesn't encourage functions with side effect
            </p>
          </section>
          <section class="future" aria-hidden="true" style="top: 330px; display: none;">
            <h3>Function Types</h3>
            <pre><code data-noheader="" class="hljs swift"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">_</span> a: <span class="hljs-type">Int</span>, <span class="hljs-number">_</span> b: <span class="hljs-type">Int</span>)</span></span> -&gt; <span class="hljs-type">Int</span> {
  <span class="hljs-keyword">return</span> a + b;
}
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mult</span><span class="hljs-params">(<span class="hljs-number">_</span> a:  <span class="hljs-type">Int</span>, <span class="hljs-number">_</span> b: <span class="hljs-type">Int</span>)</span></span> -&gt; <span class="hljs-type">Int</span> {
  <span class="hljs-keyword">return</span> a * b;
}
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">calc</span> <span class="hljs-params">(<span class="hljs-number">_</span> op: <span class="hljs-params">(<span class="hljs-type">Int</span>, <span class="hljs-type">Int</span>)</span></span></span> -&gt; <span class="hljs-type">Int</span>, <span class="hljs-number">_</span> a: <span class="hljs-type">Int</span>, <span class="hljs-number">_</span> b: <span class="hljs-type">Int</span>)) {
  <span class="hljs-built_in">print</span>(op(a, b))
}
<span class="hljs-keyword">let</span> a = <span class="hljs-number">5</span>, b = <span class="hljs-number">6</span>
calc(add, a, b)
calc(mult, a, b)</code></pre>
            <p>
              Function's type consists of <br> types of parameters and return value
            </p>
          </section>
					<section class="future" aria-hidden="true" style="top: 330px; display: none;">
						<h3>Operators</h3>
						<pre><code data-noheader="" class="hljs swift"><span class="hljs-function"><span class="hljs-keyword">func</span> +<span class="hljs-params">(<span class="hljs-number">_</span> <span class="hljs-keyword">left</span>: <span class="hljs-type">Bool</span>, <span class="hljs-number">_</span> <span class="hljs-keyword">right</span>: <span class="hljs-type">Bool</span>)</span></span> {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">left</span> || <span class="hljs-keyword">right</span>
}
<span class="hljs-keyword">let</span> a = <span class="hljs-literal">true</span>, b = <span class="hljs-literal">false</span>
<span class="hljs-keyword">let</span> <span class="hljs-built_in">c</span> = a + b</code></pre>
					</section>
          <section class="future" aria-hidden="true" style="top: 330px; display: none;">
            <h3>Nested Functions</h3>
            <pre><code data-noheader="" class="hljs swift"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">counter</span><span class="hljs-params">(forward: <span class="hljs-type">Bool</span>)</span></span> -&gt; (<span class="hljs-type">Int</span>) -&gt; <span class="hljs-type">Int</span> {
  <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">stepForward</span><span class="hljs-params">(input: <span class="hljs-type">Int</span>)</span></span> -&gt; <span class="hljs-type">Int</span> {
    <span class="hljs-keyword">return</span> input + <span class="hljs-number">1</span>
  }
  <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">stepBackward</span><span class="hljs-params">(input: <span class="hljs-type">Int</span>)</span></span> -&gt; <span class="hljs-type">Int</span> {
    <span class="hljs-keyword">return</span> input - <span class="hljs-number">1</span>
  }

  <span class="hljs-keyword">return</span> forward ? stepForward : stepBackward
}</code></pre>
          </section>
        </section>
<!-- Closures			-->
        <section hidden="" aria-hidden="true" class="stack future" style="top: 330px; display: none;">
          <section data-background="../img/swift-og.png" data-background-image="../img/swift-og.png" style="top: 330px; display: none;">
            <h1>Closures</h1>
          </section>
          <section class="future" aria-hidden="true" style="top: 330px; display: none;">
            <h3>Closing over context</h3>
            <pre><code data-noheader="" class="hljs swift"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">counter</span><span class="hljs-params">(increment: <span class="hljs-type">Int</span>, forward: <span class="hljs-type">Bool</span>)</span></span> -&gt; (<span class="hljs-type">Int</span>) -&gt; <span class="hljs-type">Int</span> {

  <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">backward</span><span class="hljs-params">(input: <span class="hljs-type">Int</span>)</span></span> -&gt; <span class="hljs-type">Int</span> {
    <span class="hljs-keyword">return</span> input - increment
  }

  <span class="hljs-keyword">return</span> !forward ? backward :
    { (input: <span class="hljs-type">Int</span>) -&gt; <span class="hljs-type">Int</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">return</span> input + increment }
}</code></pre>
            <p>
              Closures are blocks of code that can capture <br>local constants and variables
            </p>
          </section>
          <section class="future" aria-hidden="true" style="top: 330px; display: none;">
            <h3>Local context</h3>
            <pre><code data-noheader="" class="hljs swift"><span class="hljs-comment">// global function</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">counter</span><span class="hljs-params">(increment: <span class="hljs-type">Int</span>, forward: <span class="hljs-type">Bool</span>)</span></span> -&gt; (<span class="hljs-type">Int</span>) -&gt; <span class="hljs-type">Int</span> {
  <span class="hljs-comment">// local function – increment is captured</span>
  <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">backward</span><span class="hljs-params">(input: <span class="hljs-type">Int</span>)</span></span> -&gt; <span class="hljs-type">Int</span> {
    <span class="hljs-keyword">return</span> input - increment
  }

  <span class="hljs-keyword">return</span> !forward ? backward :
  <span class="hljs-comment">// closure expression – increment is captured</span>
    { (input: <span class="hljs-type">Int</span>) -&gt; <span class="hljs-type">Int</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">return</span> input + increment }
}</code></pre>
            <p>
              Local functions and closure expressions <br>can capture any value in context
            </p>
            <p>
              Global functions don't capture any values
            </p>
          </section>
          <section class="future" aria-hidden="true" style="top: 330px; display: none;">
            <h3>Closure Expression</h3>
            <pre><code data-noheader="" class="hljs swift"><span class="hljs-keyword">let</span> names = [<span class="hljs-string">"Anna"</span>, <span class="hljs-string">"Ivan"</span>, <span class="hljs-string">"Maria"</span>, <span class="hljs-string">"John"</span>]

<span class="hljs-keyword">var</span> reversedNames = names.sorted(by: {
    (s1: <span class="hljs-type">String</span>, s2: <span class="hljs-type">String</span>) -&gt; <span class="hljs-type">Bool</span> <span class="hljs-keyword">in</span>
      <span class="hljs-keyword">return</span> s1 &gt; s2
})</code></pre>
            <p>
              Closure expression – unnamed block of executable code <br> that can capture values from local context
            </p>
          </section>
          <section class="future" aria-hidden="true" style="top: 330px; display: none;">
            <h3>Brevity of a closure</h3>
            <div class="row">
              <pre><code data-noheader="" class="hljs swift"><span class="hljs-keyword">var</span> reversedNames = names.sorted(by:
  { s1, s2 <span class="hljs-keyword">in</span> <span class="hljs-keyword">return</span> s1 &gt; s2 })</code></pre>
              <p>
                Parameter types can be inferred from context
              </p>
            </div>
            <div class="row">
              <pre><code data-noheader="" class="hljs swift"><span class="hljs-keyword">var</span> reversedNames = names.sorted(by: { <span class="hljs-keyword">return</span> $<span class="hljs-number">0</span> &gt; $<span class="hljs-number">1</span> })</code></pre>
              <p>
                Parameters can be referenced by shorthand names
              </p>
            </div>
            <div class="row">
              <pre><code data-noheader="" class="hljs swift"><span class="hljs-keyword">var</span> reversedNames = names.sorted(by: { $<span class="hljs-number">0</span> &gt; $<span class="hljs-number">1</span> })</code></pre>
              <p>
                Single-expression closure implicitly returns its result
              </p>
            </div>
          </section>
          <section class="future" aria-hidden="true" style="top: 330px; display: none;">
            <h3>Even shorter</h3>
						<div class="row">
	            <pre><code data-noheader="" class="hljs swift"><span class="hljs-keyword">var</span> reversedNames = names.sorted { $<span class="hljs-number">0</span> &gt; $<span class="hljs-number">1</span> }</code></pre>
	            <p>
	              Closure can be passed with trailing syntax
	            </p>
						</div>
						<div>
	            <pre><code data-noheader="" class="hljs swift"><span class="hljs-keyword">var</span> reversedNames = names.sorted(by: &gt;)</code></pre>
	            <p>
	              Any operator is a function
	            </p>
						</div>
          </section>
          <section class="future" aria-hidden="true" style="top: 330px; display: none;">
            <h3>Sharing a variable</h3>
            <pre><code data-noheader="" class="hljs swift"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">counter</span><span class="hljs-params">(withIncrement: <span class="hljs-type">Int</span>)</span></span> -&gt; () -&gt; <span class="hljs-type">Int</span> {
  <span class="hljs-keyword">var</span> totalCount = <span class="hljs-number">0</span>
  <span class="hljs-keyword">return</span> { totalCount += withIncrement }
}

<span class="hljs-keyword">let</span> newCounter = counter(withIncrement: <span class="hljs-number">10</span>)
<span class="hljs-built_in">print</span>(newCounter()) <span class="hljs-comment">// 10</span>
<span class="hljs-keyword">let</span> anotherCounter = newCounter
<span class="hljs-built_in">print</span>(anotherCounter()) <span class="hljs-comment">// 20</span></code></pre>
            <p class="notice">
              Closures are reference type
            </p>
          </section>
          <section class="future" aria-hidden="true" style="top: 330px; display: none;">
            <h3>Autoclosures</h3>
            <pre><code data-noheader="" class="hljs swift"><span class="hljs-keyword">var</span> names = [<span class="hljs-string">"Anna"</span>, <span class="hljs-string">"Ivan"</span>, <span class="hljs-string">"Maria"</span>, <span class="hljs-string">"John"</span>]
<span class="hljs-keyword">let</span> nextInLine = { names.remove(at:<span class="hljs-number">0</span>) }

<span class="hljs-built_in">print</span>(<span class="hljs-string">"Next one is <span class="hljs-subst">\(nextInLine()</span>!"</span>) <span class="hljs-comment">// Anna!</span>
<span class="hljs-built_in">print</span>(names.<span class="hljs-built_in">count</span>) <span class="hljs-comment">// 3</span>

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">whosNext</span><span class="hljs-params">(provider nextInLine: @autoclosure <span class="hljs-params">()</span></span></span> -&gt; <span class="hljs-type">String</span>) {
  <span class="hljs-built_in">print</span>(<span class="hljs-string">"Next one is <span class="hljs-subst">\(nextInLine()</span>)"</span>)
}
whosNext(provider: names.remove(at:<span class="hljs-number">0</span>))</code></pre>
            <p>
              <code class="hljs-attribute">@autoclosure</code> automaticaly wraps parameter <br> in closure expression
            </p>
          </section>
        </section>
<!-- Classes      -->
				<section hidden="" aria-hidden="true" class="stack future" style="top: 330px; display: none;">
          <section data-background="../img/swift-og.png" data-background-image="../img/swift-og.png" style="top: 330px; display: none;">
            <h1>Classes</h1>
          </section>
					<section class="future" aria-hidden="true" style="top: 330px; display: none;">
						<h3>Classes and Structures</h3>
						<pre><code data-noheader="" class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-type">Point</span> </span>{
    <span class="hljs-keyword">var</span> x = <span class="hljs-number">0.0</span>, y = <span class="hljs-number">0.0</span>
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Polygon</span> </span>{
    <span class="hljs-keyword">let</span> points: [<span class="hljs-type">Point</span>]
    <span class="hljs-keyword">init</span> (<span class="hljs-number">_</span> points: [<span class="hljs-type">Point</span>]) {
        <span class="hljs-keyword">self</span>.points = points
    }
    <span class="hljs-keyword">var</span> center: <span class="hljs-type">Point</span> {
        <span class="hljs-comment">/* Calculate center */</span>
        <span class="hljs-keyword">return</span> <span class="hljs-type">Point</span>(x: xVal, y:yVal)
    }
}</code></pre>
						<p>
							Classes are reference type
						</p>
						<p>
							Structures are value type and can not be inherited
						</p>
					</section>
					<section class="future" aria-hidden="true" style="top: 330px; display: none;">
						<h3>Properties</h3>
						<pre><code data-noheader="" class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Polygon</span> </span>{
    <span class="hljs-keyword">let</span> points: [<span class="hljs-type">Point</span>]  <span class="hljs-comment">// has to be set in initializer</span>
    <span class="hljs-keyword">let</span> name = <span class="hljs-string">"polygon"</span> <span class="hljs-comment">// has a default value</span>
    <span class="hljs-keyword">var</span> area: <span class="hljs-type">Double</span> {  <span class="hljs-comment">// read-only property</span>
        <span class="hljs-comment">/* Calculate area */</span>
    }
    <span class="hljs-keyword">var</span> origin: <span class="hljs-type">Point</span> {
        <span class="hljs-keyword">get</span> {<span class="hljs-comment">/* do something */</span>}
        <span class="hljs-keyword">set</span>(newOrigin) {<span class="hljs-comment">/* do something */</span>}
    }
}</code></pre>
					</section>
					<section class="future" aria-hidden="true" style="top: 330px; display: none;">
						<h3>Methods</h3>
						<pre><code data-noheader="" class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-type">Point</span> </span>{
    <span class="hljs-keyword">mutating</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">offset</span><span class="hljs-params">(<span class="hljs-number">_</span> xStep: <span class="hljs-type">Double</span>, <span class="hljs-number">_</span>  yStep: <span class="hljs-type">Double</span>)</span></span> {
        <span class="hljs-comment">/* Change x, y */</span>
    }
    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">distance</span><span class="hljs-params">(<span class="hljs-number">_</span> to: <span class="hljs-type">Point</span>)</span></span> -&gt; <span class="hljs-type">Double</span> {
        <span class="hljs-comment">/* Calculate distance */</span>
    }
}
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Polygon</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">contains</span><span class="hljs-params">(<span class="hljs-number">_</span> p: <span class="hljs-type">Point</span>)</span></span> -&gt; <span class="hljs-type">Bool</span> {
        <span class="hljs-comment">/* do something */</span>
    }
}</code></pre>
						<p>
							Structure methods that change properties has to be marked <code class="hljs-keyword">mutating</code>
						</p>
					</section>
					<section class="future" aria-hidden="true" style="top: 330px; display: none;">
						<h3>Access Control</h3>
						<pre><code data-noheader="" class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Shady</span> </span>{ <span class="hljs-comment">// implicitly internal</span>
     <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> things: [<span class="hljs-type">String</span>] = []
     <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">stuff</span><span class="hljs-params">()</span></span> {}
     <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">allClear</span><span class="hljs-params">()</span></span> {} <span class="hljs-comment">// implicitly internal</span>
     <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> totallyClear: <span class="hljs-type">String</span>
}
<span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Classified</span> </span>{ <span class="hljs-comment">// explicitly private</span>
    <span class="hljs-keyword">var</span> nothing: <span class="hljs-type">String</span> <span class="hljs-comment">// implicitly private</span>
}</code></pre>
						<p class="notice">
							All classes and class members are implicitly <code class="hljs-keyword">internal</code>
						</p>
					</section>
					<section class="future" aria-hidden="true" style="top: 330px; display: none;">
						<h3>Automatic Reference Counting</h3>
						<pre><code data-noheader="" class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">ARCout</span> </span>{
    <span class="hljs-keyword">init</span>(){
        <span class="hljs-built_in">print</span> (<span class="hljs-string">"initialized"</span>)
    }
    <span class="hljs-keyword">deinit</span>() {
        <span class="hljs-built_in">print</span> (<span class="hljs-string">"deinitialized"</span>)
    }
}
<span class="hljs-keyword">var</span> reference1: <span class="hljs-type">ARCout</span>? = <span class="hljs-type">ARCout</span>() <span class="hljs-comment">// initialized</span>
<span class="hljs-keyword">var</span> reference2 = reference1
reference1 = <span class="hljs-literal">nil</span>
reference2 = <span class="hljs-literal">nil</span> <span class="hljs-comment">// deinitialized</span></code></pre>
						<p>
							Deallocates memory if no references to object exists
						</p>
					</section>
					<section class="future" aria-hidden="true" style="top: 330px; display: none;">
						<h3>Reference Loops</h3>
						<pre><code data-noheader="" class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">ARCout</span> </span>{
    <span class="hljs-keyword">var</span> reference: <span class="hljs-type">ARCout</span>?
}
<span class="hljs-keyword">var</span> obj1 = <span class="hljs-type">ARCout</span>() <span class="hljs-comment">// initialized</span>
<span class="hljs-keyword">var</span> obj2 = <span class="hljs-type">ARCout</span>() <span class="hljs-comment">// initialized</span>
obj1.reference = obj2
obj2.reference = obj1
obj1 = <span class="hljs-literal">nil</span>
obj2 = <span class="hljs-literal">nil</span>
<span class="hljs-comment">// But nothing happened!</span></code></pre>
						<pre><code data-noheader="" class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">ARCout</span> </span>{
    <span class="hljs-keyword">weak</span> <span class="hljs-keyword">var</span> reference: <span class="hljs-type">ARCout</span>?
}</code></pre>
						<p>
							<code class="hljs-keyword">weak</code> references don't increase retain count
						</p>
						<p>
							<code class="hljs-keyword">unowned</code> references don't have to be optional values
						</p>
					</section>
					<section class="future" aria-hidden="true" style="top: 330px; display: none;">
						<h3>Inheritance</h3>
						<pre><code data-noheader="" class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Triangle:</span> <span class="hljs-type">Polygon</span> </span>{
    <span class="hljs-keyword">init</span>(<span class="hljs-number">_</span> a: <span class="hljs-type">Point</span>, <span class="hljs-number">_</span> b: <span class="hljs-type">Point</span>, <span class="hljs-number">_</span> <span class="hljs-built_in">c</span>: <span class="hljs-type">Point</span>) {
        <span class="hljs-keyword">let</span> verts = [a,b,<span class="hljs-built_in">c</span>]
        <span class="hljs-keyword">super</span>.<span class="hljs-keyword">init</span>(verts)
        name = <span class="hljs-string">"triangle"</span>
    }
    <span class="hljs-keyword">override</span> <span class="hljs-keyword">var</span> area: <span class="hljs-type">Double</span> {
        <span class="hljs-comment">/* Calculate area */</span>
    }
    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">inradius</span>: <span class="hljs-title">Double</span> </span>{
        <span class="hljs-comment">/* Calculate incircle radius */</span>
    }
}</code></pre>
						<p>
							<code class="hljs-keyword">super</code> provides access to superclass members
						</p>
						<p class="notice">
							Any overwritten member should be marked with <code class="hljs-keyword">override</code>
						</p>
					</section>
					<section class="future" aria-hidden="true" style="top: 330px; display: none;">
						<h3>Type Casting</h3>
						<pre><code data-noheader="" class="hljs swift"><span class="hljs-keyword">let</span> shapes = [<span class="hljs-type">Polygon</span>]()
<span class="hljs-comment">/* appended something to shapes */</span>
<span class="hljs-keyword">for</span> shape <span class="hljs-keyword">in</span> shapes {
    <span class="hljs-keyword">if</span> shape <span class="hljs-keyword">is</span> <span class="hljs-type">Triangle</span> {
        <span class="hljs-built_in">print</span>(<span class="hljs-string">"it's a triangle"</span>)
    }
}

<span class="hljs-keyword">for</span> shape <span class="hljs-keyword">in</span> shapes {
    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> tri = shape <span class="hljs-keyword">as</span>? <span class="hljs-type">Triangle</span> {
        <span class="hljs-built_in">print</span>(tri.inradius)
    }
}</code></pre>
							<p>
								<code class="hljs-keyword">as?</code> wraps result into optional,	<br> returns <code class="hljs-literal">nil</code> if variable cannot be downcasted
							</p>
							<p>
								<code class="hljs-keyword">as!</code> triggers a runtime error instead
							</p>
					</section>
        </section>
<!-- Error Handling -->
				<section hidden="" aria-hidden="true" class="stack future" style="top: 330px; display: none;">
					<section data-background="../img/swift-og.png" data-background-image="../img/swift-og.png" style="top: 330px; display: none;">
						<h1>Error Handling</h1>
					</section>
					<section class="future" aria-hidden="true" style="top: 330px; display: none;">
						<h3>Throwing Errors</h3>
						<pre><code data-noheader="" class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">MyErrors:</span> <span class="hljs-type">ErrorType</span> </span>{
    <span class="hljs-keyword">case</span> <span class="hljs-type">OutOfOptions</span>
}
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">chooseOption</span><span class="hljs-params">()</span></span> <span class="hljs-keyword">throws</span> -&gt; <span class="hljs-type">Int</span> {
    <span class="hljs-keyword">throw</span> <span class="hljs-type">MyErrors</span>.<span class="hljs-type">OutOfOptions</span>
}</code></pre>
						<p>
							<code class="hljs-type">ErrorType</code> – empty protocol for declaring errors
						</p>
						<p class="notice">
							Only throwing functions can throw and propagate errors
						</p>
					</section>
					<section class="future" aria-hidden="true" style="top: 330px; display: none;">
						<h3>Catching Errors</h3>
						<pre><code data-noheader="" class="hljs swift"><span class="hljs-keyword">do</span> {
    <span class="hljs-keyword">var</span> option = <span class="hljs-keyword">try</span> chooseOption()
}
<span class="hljs-keyword">catch</span> <span class="hljs-type">MyErrors</span>.<span class="hljs-type">OutOfOptions</span> {
    <span class="hljs-built_in">print</span>(<span class="hljs-string">"I'm all out of options here!"</span>)
}</code></pre>
						<p>
							<code class="hljs-keyword">try</code> can only be used in <code class="hljs-keyword">do-catch</code> block
						</p>
						<p>
							<code class="hljs-keyword">do-catch</code> block stops error propagation <br> if it catches an error
						</p>
					</section>
					<section class="future" aria-hidden="true" style="top: 330px; display: none;">
						<h3>Other Options</h3>
						<pre><code data-noheader="" class="hljs swift"><span class="hljs-keyword">var</span> option = <span class="hljs-keyword">try</span>? chooseOption() <span class="hljs-comment">// Int?</span>

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makeAnOption</span><span class="hljs-params">()</span></span> -&gt; <span class="hljs-type">Int</span> {
    <span class="hljs-keyword">var</span> option = <span class="hljs-keyword">try</span>! chooseOption() <span class="hljs-comment">// just do it</span>
    <span class="hljs-keyword">return</span> option
}</code></pre>
						<p>
							<code class="hljs-keyword">try?</code> wraps value into an optinal, retruns <code class="hljs-literal">nil</code> if error occurs
						</p>
						<p>
							<code class="hljs-keyword">try!</code> fails here and now, stops error popagation
						</p>
					</section>
					<section class="future" aria-hidden="true" style="top: 330px; display: none;">
						<h3>Guard</h3>
						<pre><code data-noheader="" class="hljs swift"><span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> option = <span class="hljs-keyword">try</span>? chooseOption() <span class="hljs-keyword">else</span> {
    <span class="hljs-built_in">print</span>(<span class="hljs-string">"Sorry, we're out of options!"</span>)
    <span class="hljs-keyword">return</span>
}
<span class="hljs-built_in">print</span>(<span class="hljs-string">"Congratulations, your option is <span class="hljs-subst">\(option)</span>"</span>)</code></pre>
						<p>
							<code class="hljs-keyword">guard</code> is assert-like operator that allow quick escape <br> if condition is not met
						</p>
						<p class="notice">
							guard-bound optional is accesible outside of it's else clause
						</p>
					</section>
				</section>
<!-- Resources			-->
				<section hidden="" aria-hidden="true" class="future" style="top: 330px; display: none;">
					<h3 style="display:none;">Related Resources</h3>
					<ul>
						<li><a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html">Swift Programming Language - Apple Developer</a>
						</li>
						<li><a href="https://developer.apple.com/reference/swift">Swift Standart Library - Apple Developer</a>
						</li>
					</ul>
				</section>
			</div>
		<div class="backgrounds"><div class="slide-background past" data-loaded="true" style="display: block;"></div><div class="slide-background present" data-loaded="true" style="display: block;"></div><div class="slide-background stack future" data-loaded="true" style="display: block;"><div class="slide-background present" data-background-hash="../img/swift-og.pngnullnullnullnullnullnullnullnull" data-loaded="true" style="display: block; background-image: url(&quot;../img/swift-og.png&quot;);"></div><div class="slide-background future" data-loaded="true" style="display: block;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div></div><div class="slide-background stack future" data-loaded="true" style="display: block;"><div class="slide-background present" data-background-hash="../img/swift-og.pngnullnullnullnullnullnullnullnull" data-loaded="true" style="display: block; background-image: url(&quot;../img/swift-og.png&quot;);"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div></div><div class="slide-background stack future" style="display: none;"><div class="slide-background present" data-background-hash="../img/swift-og.pngnullnullnullnullnullnullnullnull" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div></div><div class="slide-background stack future" style="display: none;"><div class="slide-background present" data-background-hash="../img/swift-og.pngnullnullnullnullnullnullnullnull" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div></div><div class="slide-background stack future" style="display: none;"><div class="slide-background present" data-background-hash="../img/swift-og.pngnullnullnullnullnullnullnullnull" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div></div><div class="slide-background future" style="display: none;"></div></div><div class="progress" style="display: block;"><span style="width: 18.625px;"></span></div><aside class="controls" style="display: block;"><button class="navigate-left enabled" aria-label="previous slide"></button><button class="navigate-right enabled" aria-label="next slide"></button><button class="navigate-up" aria-label="above slide"></button><button class="navigate-down" aria-label="below slide"></button></aside><div class="speaker-notes" data-prevent-swipe=""></div><div class="pause-overlay"></div><div id="aria-status-div" aria-live="polite" aria-atomic="true" style="position: absolute; height: 1px; width: 1px; overflow: hidden; clip: rect(1px 1px 1px 1px);">
					Overview
					
						
					
						
							The Basics
						
						
							Functions
						
						
							Closures
						
						
							Classes
						
						
							Error Handling
						
					
				
				
					
				
				
				</div></div>

		<script src="./Swift-CS333. Swift Syntax_files/head.min.js"></script>
		<script src="./Swift-CS333. Swift Syntax_files/reveal.js"></script>
		<script src="./Swift-CS333. Swift Syntax_files/swift.js"></script>

		<svg height="0" xmlns="http://www.w3.org/2000/svg">
		    <filter id="drop-shadow">
		        <fegaussianblur in="SourceAlpha" stdDeviation="4"></fegaussianblur>
		        <feoffset dx="12" dy="12" result="offsetblur"></feoffset>
		        <feflood flood-color="rgba(0,0,0,0.5)"></feflood>
		        <fecomposite in2="offsetblur" operator="in"></fecomposite>
		        <femerge>
		            <femergenode></femergenode>
		            <femergenode in="SourceGraphic"></femergenode>
		        </femerge>
		    </filter>
		</svg>

<svg width="480px" height="480px" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <defs>Swift-logo</defs>
    <path d="M42.9,59.7 L15.7,59.7 C10.2,59.7 5.7,55.2 5.7,49.7 L5.7,22.7 C5.7,17.2 10.2,12.7 15.7,12.7 L42.8,12.7 C48.3,12.7 52.8,17.2 52.8,22.7 L52.8,49.8 C52.9,55.2 48.4,59.7 42.9,59.7 L42.9,59.7 Z" id="Shape" stroke="none" fill="#EF5138" fill-rule="evenodd"></path>
    <path d="M42.8,41.7 L42.8,41.7 C42.8,41.5 42.9,41.3 42.9,41.2 C44.9,33.4 40.1,24.2 32,19.4 C35.5,24.2 37.1,30 35.7,35.1 C35.6,35.6 35.4,36 35.3,36.4 C35.1,36.3 34.9,36.2 34.6,36 C34.6,36 26.6,31 17.9,22.3 C17.7,22.1 22.5,29.3 28.1,35.1 C25.5,33.6 18.2,28.4 13.7,24.2 C14.3,25.1 14.9,26 15.7,26.9 C19.5,31.8 24.5,37.8 30.5,42.4 C26.3,45 20.3,45.2 14.4,42.4 C12.9,41.7 11.6,40.9 10.3,39.9 C12.8,43.9 16.7,47.4 21.4,49.4 C27,51.8 32.6,51.6 36.7,49.4 L36.7,49.4 C38.4,48.3 43,46.6 45.3,51.1 C45.7,52 46.8,46.7 42.8,41.7 L42.8,41.7 Z" id="Shape" stroke="none" fill="#FFFFFF" fill-rule="evenodd"></path>
</svg>
	

</body></html>